{"version":3,"sources":["Searchbox.js","Card.js","Cardsarray.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Searchbox","searchChange","className","type","placeholder","onChange","Card","name","email","id","alt","src","Cardsarray","robots","Cardscomponent","map","props","i","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","filteredrobo","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAiBeA,EAdC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACjB,OACQ,yBAAKC,UAAU,OACpB,2BAAOA,UAAU,uCACjBC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCOCK,EAdJ,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GACxB,OAEO,yBAAKP,UAAU,oDACd,yBAAOQ,IAAI,QAAQC,IAAG,+BAA0BF,EAA1B,cACnB,6BACG,4BAAKF,GACL,2BAAIC,MCgBJI,EArBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEbC,EAAeD,EAAOE,KAAI,SAACC,EAAMC,GAEvC,OAAO,kBAAC,EAAD,CACNR,GAAII,EAAOI,GAAGR,GACdF,KAAMM,EAAOI,GAAGV,KAChBC,MAAOK,EAAOI,GAAGT,WAMlB,OACC,6BACCM,ICPaI,EAVF,SAACF,GACb,OACO,yBAAKG,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DN,EAAMO,WC4CAC,G,wDA3Cd,aAAc,IAAD,8BACZ,gBAiBCC,eAAe,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAYF,EAAMG,OAAOC,SAjB3C,EAAKC,MAAM,CACNlB,OAAO,GACPe,YAAa,IAJN,E,gEAQM,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKT,SAAS,CAAEd,OAAOuB,S,+BAUf,IAAD,OACAC,EAAaC,KAAKP,MAAMlB,OAAO0B,QAAO,SAAA1B,GAEtC,OAAQA,EAAON,KAAKiC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAGzE,OACQ,yBAAKtC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAcqC,KAAKb,iBAC9B,kBAAC,EAAD,KACH,kBAAE,EAAF,CAAcZ,OAAQwB,U,GApCXK,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e571b5a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Searchbox=({searchChange})=>{\r\n\treturn(\r\n         <div className=\"pa2\">\r\n    <input className=\"pa3 bw2 ba b--green bg-lightest-blue\"\r\n    type=\"search\" \r\n    placeholder=\"search robots\"\r\n    onChange={searchChange}\r\n     />\r\n    \r\n\r\n   </div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Card=( {name,email,id}) => {\r\n\treturn(\r\n\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n         <img   alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n               <h2>{name}</h2>\r\n               <p>{email}</p>\r\n         \r\n            </div>\r\n        </div>     \r\n\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst Cardsarray=({robots})=>{\r\n\r\nconst Cardscomponent=robots.map((props,i)=>{\r\n\r\nreturn(<Card  \r\n\tid={robots[i].id} \r\n\tname={robots[i].name} \r\n\temail={robots[i].email}/>);\r\n\r\n})\r\n\r\n\r\n\r\nreturn(\r\n\t<div>\r\n\t{Cardscomponent}\r\n\t</div>\r\n);\r\n\r\n}\r\n\r\nexport default Cardsarray;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n        {props.children}\r\n\r\n        </div>\r\n\r\n\t\t)\r\n\r\n}\r\nexport default Scroll;","import React,{Component}from 'react';\r\n import Searchbox from './Searchbox';\r\nimport Cardsarray from './Cardsarray';\r\nimport Scroll from'./Scroll';\r\nimport './App.css';\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t      robots:[],\r\n\t      searchfield: ''\r\n    }\r\n} \r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response=>{\r\n\t\treturn response.json()\r\n\t})\r\n\t.then(users =>{\r\n\t\tthis.setState({ robots:users })\r\n\t});\r\n}\r\n\r\n   onSearchChange=(event)=>{\r\n   \tthis.setState({ searchfield:event.target.value })\r\n   \t}\r\n\r\n\t   \r\n\r\n\trender(){\r\n\t\t const filteredrobo=this.state.robots.filter(robots=>{\r\n\r\n\t       \treturn  robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n\t       })\r\n   \r\n\t\treturn(\r\n          <div className=\"tc\">\r\n          <h1 className=\"f1\">Robofriends</h1>\r\n          <Searchbox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n       < Cardsarray  robots={filteredrobo}/>\r\n           </Scroll>\r\n          </div>\r\n\r\n\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n\t<App/> ,\n  document.getElementById('root')\n\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}